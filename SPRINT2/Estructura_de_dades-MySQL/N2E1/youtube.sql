-- MySQL Script generated by MySQL Workbench
-- Tue 09 Feb 2021 03:22:31 PM CET
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema YOUTUBE
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `YOUTUBE` ;

-- -----------------------------------------------------
-- Schema YOUTUBE
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `YOUTUBE` ;
USE `YOUTUBE` ;

-- -----------------------------------------------------
-- Table `YOUTUBE`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `YOUTUBE`.`users` ;

CREATE TABLE IF NOT EXISTS `YOUTUBE`.`users` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(255) NOT NULL,
  `password` VARCHAR(50) NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `dob` DATE NOT NULL,
  `gender` VARCHAR(1) NOT NULL DEFAULT "m",
  `country` VARCHAR(50) NOT NULL,
  `postal_code` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX (`email` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `YOUTUBE`.`videos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `YOUTUBE`.`videos` ;

CREATE TABLE IF NOT EXISTS `YOUTUBE`.`videos` (
  `video_id` INT NOT NULL AUTO_INCREMENT,
  `titol` VARCHAR(255) NOT NULL,
  `description` VARCHAR(255) NOT NULL,
  `size` INT NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `video_length` FLOAT NOT NULL,
  `thumbnail` BLOB NOT NULL,
  `views` INT NOT NULL DEFAULT 0,
  `likes` INT NOT NULL DEFAULT 0,
  `dislikes` INT NOT NULL DEFAULT 0,
  `status` ENUM('public', 'hidden', 'private') NOT NULL DEFAULT "private",
  `created_at` TIMESTAMP NOT NULL DEFAULT now(),
  `user_id` INT NOT NULL,
  PRIMARY KEY (`video_id`),
  INDEX `fk_videos_users` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_videos_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `YOUTUBE`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `YOUTUBE`.`tags`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `YOUTUBE`.`tags` ;

CREATE TABLE IF NOT EXISTS `YOUTUBE`.`tags` (
  `tag_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`tag_id`));


-- -----------------------------------------------------
-- Table `YOUTUBE`.`tagged_as`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `YOUTUBE`.`tagged_as` ;

CREATE TABLE IF NOT EXISTS `YOUTUBE`.`tagged_as` (
  `video_id` INT NOT NULL,
  `tag_id` INT NOT NULL,
  PRIMARY KEY (`tag_id`, `video_id`),
  INDEX `fk_tagged_as_videos_tags` (`video_id` ASC) VISIBLE,
  CONSTRAINT `fk_tagged_as_videos_tags`
    FOREIGN KEY (`video_id`)
    REFERENCES `YOUTUBE`.`videos` (`video_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_tagged_as_tags_videos`
    FOREIGN KEY (`tag_id`)
    REFERENCES `YOUTUBE`.`tags` (`tag_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `YOUTUBE`.`channels`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `YOUTUBE`.`channels` ;

CREATE TABLE IF NOT EXISTS `YOUTUBE`.`channels` (
  `channel_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `description` VARCHAR(255) NOT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT now(),
  `user_id` INT NOT NULL,
  PRIMARY KEY (`channel_id`),
  INDEX `fk_channels_users` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_channels_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `YOUTUBE`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `YOUTUBE`.`playlists`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `YOUTUBE`.`playlists` ;

CREATE TABLE IF NOT EXISTS `YOUTUBE`.`playlists` (
  `playlist_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `status` ENUM('public', 'private') NOT NULL DEFAULT "private",
  `created_at` TIMESTAMP NOT NULL DEFAULT now(),
  `user_id` INT NOT NULL,
  PRIMARY KEY (`playlist_id`),
  INDEX `fk_playlists_users` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_playlists_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `YOUTUBE`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `YOUTUBE`.`comments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `YOUTUBE`.`comments` ;

CREATE TABLE IF NOT EXISTS `YOUTUBE`.`comments` (
  `comment_id` INT NOT NULL AUTO_INCREMENT,
  `text` VARCHAR(255) NOT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT now(),
  `user_id` INT NOT NULL,
  `video_id` INT NOT NULL,
  PRIMARY KEY (`comment_id`),
  INDEX `fk_comments_users_videos` (`user_id` ASC) VISIBLE,
  INDEX (`video_id` ASC) VISIBLE,
  CONSTRAINT `fk_comments_users_videos`
    FOREIGN KEY (`user_id`)
    REFERENCES `YOUTUBE`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_comments_videos_users`
    FOREIGN KEY (`video_id`)
    REFERENCES `YOUTUBE`.`videos` (`video_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `YOUTUBE`.`comment_likes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `YOUTUBE`.`comment_likes` ;

CREATE TABLE IF NOT EXISTS `YOUTUBE`.`comment_likes` (
  `comment_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT now(),
  `like` TINYINT NOT NULL,
  PRIMARY KEY (`user_id`, `comment_id`),
  INDEX (`comment_id` ASC) VISIBLE,
  CONSTRAINT `fk_comment_likes_users_comments`
    FOREIGN KEY (`user_id`)
    REFERENCES `YOUTUBE`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_comment_likes_comments_users`
    FOREIGN KEY (`comment_id`)
    REFERENCES `YOUTUBE`.`comments` (`comment_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `YOUTUBE`.`subscribed_to`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `YOUTUBE`.`subscribed_to` ;

CREATE TABLE IF NOT EXISTS `YOUTUBE`.`subscribed_to` (
  `channel_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`user_id`, `channel_id`),
  INDEX (`channel_id` ASC) VISIBLE,
  CONSTRAINT `fk_subscribed_to_users_channels`
    FOREIGN KEY (`user_id`)
    REFERENCES `YOUTUBE`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_subscribed_to_channels_users`
    FOREIGN KEY (`channel_id`)
    REFERENCES `YOUTUBE`.`channels` (`channel_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `YOUTUBE`.`video_likes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `YOUTUBE`.`video_likes` ;

CREATE TABLE IF NOT EXISTS `YOUTUBE`.`video_likes` (
  `video_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT now(),
  `like` TINYINT NOT NULL,
  PRIMARY KEY (`user_id`, `video_id`),
  INDEX (`video_id` ASC) VISIBLE,
  CONSTRAINT `fk_video_likes_users_videos`
    FOREIGN KEY (`user_id`)
    REFERENCES `YOUTUBE`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_video_likes_videos_users`
    FOREIGN KEY (`video_id`)
    REFERENCES `YOUTUBE`.`videos` (`video_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `YOUTUBE`.`playlist_videos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `YOUTUBE`.`playlist_videos` ;

CREATE TABLE IF NOT EXISTS `YOUTUBE`.`playlist_videos` (
  `playlist_id` INT NOT NULL,
  `video_id` INT NOT NULL,
  PRIMARY KEY (`playlist_id`, `video_id`),
  INDEX (`video_id` ASC) VISIBLE,
  CONSTRAINT `fk_playlist_videos_playlists_videos`
    FOREIGN KEY (`playlist_id`)
    REFERENCES `YOUTUBE`.`playlists` (`playlist_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_playlist_videos_videos_playlists`
    FOREIGN KEY (`video_id`)
    REFERENCES `YOUTUBE`.`videos` (`video_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
